{
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "env": {
    "es6": true,
    "browser": true,
    "node": true
  },
  "ignorePatterns": ["/dist/**"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "experimentalObjectRestSpread": true,
      "impliedStrict": true
    },
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "settings": {
    "import/extensions": [".ts", ".tsx", ".js", ".jsx"],
    "import/parser": {
      "@typescript-eslint/parser": [".d.ts", ".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      },
      "node": true
    }
  },
  "overrides": [
    {
      // Use TypeScript-specific rules for TypeScript files
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/naming-convention": [
          "warn",
          { "selector": "default", "format": ["camelCase"], "leadingUnderscore": "allow" },
          {
            "selector": ["enumMember"],
            "format": ["camelCase", "UPPER_CASE"],
            "leadingUnderscore": "allow"
          },
          // Allow function components to use PascalCase
          { "selector": "function", "format": ["camelCase", "PascalCase"] },
          // Allow const variables to use PascalCase (specifically for styled-components)
          {
            "selector": ["variable"],
            "modifiers": ["const"],
            "format": ["camelCase", "UPPER_CASE", "PascalCase"],
            "leadingUnderscore": "allow"
          },
          { "selector": "objectLiteralProperty", "format": ["camelCase", "PascalCase"] },
          { "selector": "typeLike", "format": ["PascalCase"] }
        ]
      },

      "parserOptions": {
        "project": ["./tsconfig.json"]
      }
    },
    {
      // Disable restricted imports for config files
      "files": ["*.config.js", "*.config.ts"],
      "rules": {
        "no-restricted-imports": "off"
      }
    },
    {
      // Disable `import/no-named-as-default` for imported packages
      // (currently triggers on imports of styled-components)
      "files": ["**/*.js", "**/*.ts", "**/*.tsx"],
      "excludedFiles": ["node_modules/**"],
      "rules": {
        "import/no-named-as-default": "off"
      }
    }
  ],
  "plugins": ["@typescript-eslint", "simple-import-sort", "import"],
  "rules": {
    "comma-style": [1, "last"],
    "curly": [1, "multi-line"],
    "eol-last": 1,
    "eqeqeq": 1,
    "new-cap": 1,
    "no-undef": "error",
    "no-array-constructor": 1,
    "no-mixed-spaces-and-tabs": 1,
    "no-new-object": 1,
    "no-shadow-restricted-names": 1,
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "no-unused-vars": 0, // Rely on typescript-eslint rule above
    "no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            // Forbid relative imports from outside the current folder
            "group": ["../*", "*config.js"],
            "message": "Relative imports from outside the current folder are not allowed. Use absolute imports (`src/`) instead."
          }
        ]
      }
    ],
    "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/typedef": ["error", { "parameters": true }],
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "fixStyle": "inline-type-imports"
      }
    ],
    "prefer-const": 1,
    "radix": 1,
    "react/prop-types": 0, // This relies specifically on React PropTypes and ignores other typing methods
    "semi": 2,
    "simple-import-sort/imports": [
      "warn",
      {
        "groups": [
          // Side effect imports.
          ["^\\u0000"],
          // Node.js builtins prefixed with `node:`.
          ["^node:"],
          // Packages.
          // Things that start with a letter (or digit or underscore), or `@` followed by a letter.
          ["^@?\\w"],
          // Absolute imports (`src/`) and other imports such as Vue-style `@/foo`.
          // Anything not matched in another group.
          ["^", "^src/[/\\w]*", "^tests/[/\\w]*"],
          // Relative imports
          // "\\u0000" is added to the end of imported types.
          ["^[.]+.*/[a-zA-Z]+[\\w]*(\\u0000)?$"],
          // Relative imports - resource files
          ["^[.].*/[\\w?_\\-]*[.]?[\\w.?&_\\-]*$"]
        ]
      }
    ],
    "simple-import-sort/exports": "warn",
    "import/no-restricted-paths": [
      "error",
      {
        // Forbid colorizer from importing other code to enforce it being a standalone module
        "zones": [{ "target": "src/colorizer", "from": "src", "except": ["./colorizer"] }]
      }
    ],
    "import/no-unresolved": "error",
    "space-before-blocks": [1, "always"]
  }
}
